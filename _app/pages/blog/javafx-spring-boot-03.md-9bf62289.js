import{S as ie,i as re,s as ue,C as Zs,w as ke,x as de,y as fe,z as ve,A as Yt,q as he,o as me,B as we,Q as Gt,e as o,t,k as u,c as p,a as l,h as e,d as s,m as k,b as m,F as Ee,g as i,G as n,D as _e}from"../../chunks/index-ca5692cf.js";import{P as ge}from"../../chunks/_post-3b80de77.js";/* empty css                                  */function ye($){let d,g,A,j,r,_,O,fn,vn,ea,z,hn,mn,oa,wn,En,pa,Y,_n,gn,la,G,yn,Ra,Ha,Ua,V,bn,Ma,Z,xn,Wa,f,Cn,ca,Sn,Pn,ia,In,An,ra,On,Fn,ua,Dn,Ln,ka,jn,Jn,da,Xn,Bn,fa,Tn,Rn,va,Hn,Un,ha,Mn,Wn,$a,J,Zt=`<code class="language-java">  <span class="token keyword">private</span> <span class="token class-name">ConfigurableApplicationContext</span> context<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token class-name">ApplicationContextInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GenericApplicationContext</span><span class="token punctuation">></span></span> initializer <span class="token operator">=</span>
              context <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
                  context<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">JavaFxApp</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  context<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token class-name">Parameters</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">::</span><span class="token function">getParameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplicationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">sources</span><span class="token punctuation">(</span><span class="token class-name">SpringBootApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">initializers</span><span class="token punctuation">(</span>initializer<span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRaw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span></code>`,za,q,$n,Ya,x,zn,ma,Yn,Gn,wa,Vn,Zn,Ga,X,qt=`<code class="language-java">  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">Platform</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span></code>`,Va,N,qn,Za,C,Nn,Ea,Qn,Kn,_a,as,ns,qa,B,Nt=`<code class="language-java"> <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Stage</span> primaryStage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Pane</span> helloPane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pane</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"Hello JavaFx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        primaryStage<span class="token punctuation">.</span><span class="token function">setScene</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>helloPane<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        primaryStage<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span></code>`,Na,y,ss,ga,ts,es,ya,os,ps,ba,ls,cs,Qa,Q,is,Ka,T,Qt=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StageReadyEvent</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationEvent</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Getter</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Stage</span> stage<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">StageReadyEvent</span><span class="token punctuation">(</span><span class="token class-name">Stage</span> stage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>stage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>stage <span class="token operator">=</span> stage<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,an,w,rs,xa,us,ks,Ca,ds,fs,Sa,vs,hs,Pa,ms,ws,nn,R,Kt=`<code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StageReadyEventListener</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StageReadyEvent</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> applicationTitle<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">StageReadyEventListener</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">,</span>
                                   <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;app.title&#125;"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> applicationTitle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationTitle <span class="token operator">=</span> applicationTitle<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">StageReadyEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Stage</span> stage <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getStage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Pane</span> helloPane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pane</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"Hello JavaFx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stage<span class="token punctuation">.</span><span class="token function">setScene</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>helloPane<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stage<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationTitle<span class="token punctuation">)</span><span class="token punctuation">;</span>
        stage<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,sn,h,Es,Ia,_s,gs,Aa,ys,bs,Oa,xs,Cs,Fa,Ss,Ps,Da,Is,As,tn,H,ae='<code class="language-properties"><span class="token attr-name">app.title</span><span class="token punctuation">=</span><span class="token attr-value">Hello JavaFX with Spring Boot</span></code>',en,E,Os,La,Fs,Ds,ja,Ls,js,Ja,Js,Xs,Xa,Bs,Ts,on,F,Rs,Ba,Hs,Us,pn,U,ne=`<code class="language-java">  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Stage</span> primaryStage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StageReadyEvent</span><span class="token punctuation">(</span>primaryStage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span></code>`,ln,K,Ms,cn,aa,na,qs,rn,D,Ws,Ta,$s,zs,un,M,Ys,W,Gs;return{c(){d=o("div"),g=o("h3"),A=t("All articles in this series"),j=u(),r=o("ol"),_=o("li"),O=o("a"),fn=t("JavaFX with Spring Boot Part-01: Introduction"),vn=u(),ea=o("li"),z=o("a"),hn=t("JavaFX with Spring Boot Part-02: Basic Integration"),mn=u(),oa=o("li"),wn=t("JavaFX with Spring Boot Part-03: Advanced Integration"),En=u(),pa=o("li"),Y=o("a"),_n=t("JavaFX with Spring Boot Part-04: Using FXML"),gn=u(),la=o("li"),G=o("a"),yn=t("JavaFX with Spring Boot Part-05: FxWeaver Integration"),Ra=u(),Ha=o("br"),Ua=u(),V=o("p"),bn=t("In the previous article, we\u2019ve seen a basic/minimal integration of Spring boot with JavaFX. In this article we\u2019re going to see some extra wiring up to get the most out of Spring Boot."),Ma=u(),Z=o("h2"),xn=t("Creating the Application Context"),Wa=u(),f=o("p"),Cn=t("In the previous article, we had extended JavaFX\u2019s "),ca=o("code"),Sn=t("Application"),Pn=t(" abstract class by overriding its "),ia=o("code"),In=t("start"),An=t(" method. "),ra=o("code"),On=t("start"),Fn=t(" method and its "),ua=o("code"),Dn=t("close"),Ln=t(" counter part are called on the UI thread. On the other hand the "),ka=o("code"),jn=t("init"),Jn=t(" method is called on a non-ui thread and the "),da=o("code"),Xn=t("start"),Bn=t(" is only called after the "),fa=o("code"),Tn=t("init"),Rn=t(" method returns. This makes the "),va=o("code"),Hn=t("init"),Un=t(" method the perfect place to create our "),ha=o("code"),Mn=t("ApplicationContext"),Wn=t("."),$a=u(),J=o("pre"),za=u(),q=o("h2"),$n=t("Closing the Application Context"),Ya=u(),x=o("p"),zn=t("According to the official docs, "),ma=o("code"),Yn=t("stop"),Gn=t(" method \u201Cprovides a convenient place to prepare for application exit and destroy resources\u201D. It is the right place to close the application context as well as to terminate the UI thread by calling "),wa=o("code"),Vn=t("Platform.exit()"),Zn=t("."),Ga=u(),X=o("pre"),Va=u(),N=o("h2"),qn=t("Decoupling UI Creation Code from the Application Configuration Code"),Za=u(),C=o("p"),Nn=t("In the previous article, we had overridden the "),Ea=o("code"),Qn=t("start"),Kn=t(" method as follows. Since we only want application-wide initialization and termination related code in the "),_a=o("code"),as=t("JavaFxApp"),ns=t(" class, this is not ideal."),qa=u(),B=o("pre"),Na=u(),y=o("p"),ss=t("Spring provides a great way of communication among components by firing events. We will be using this feature for various things in the upcoming articles. For now, let us make use of it to move the UI creation code in its own place. Since "),ga=o("code"),ts=t("start"),es=t(" method is called when the "),ya=o("code"),os=t("stage"),ps=t(" object is ready (in other words JavaFX application thread aka UI thread is ready), we want to publish an event in the "),ba=o("code"),ls=t("start"),cs=t(" method and handle the event in some where else."),Qa=u(),Q=o("p"),is=t("Let\u2019s first create an event class for our case."),Ka=u(),T=o("pre"),an=u(),w=o("p"),rs=t("Then create a "),xa=o("code"),us=t("Listener"),ks=t(" for this type of event. Since we\u2019ll be creating various events and listeners in the future, it is good the create a new package called "),Ca=o("code"),ds=t("event"),fs=t(" and put all events and their corresponding listeners there. Also, I highly recommend "),Sa=o("code"),vs=t("XYZEvent"),hs=t(" and "),Pa=o("code"),ms=t("XYZEventListener"),ws=t(" pattern for naming event and listener classes."),nn=u(),R=o("pre"),sn=u(),h=o("p"),Es=t("With "),Ia=o("code"),_s=t("@Component"),gs=t(" annotation, spring will take care of creating a "),Aa=o("code"),ys=t("StageReadyEventListener"),bs=t(" object for us. The "),Oa=o("code"),xs=t("ApplicationContext"),Cs=t(" we\u2019ve created in the "),Fa=o("code"),Ss=t("init"),Ps=t(" method will be injected into the constructor by Spring as well. Let\u2019s make use of another Spring goodie by defining a title for our application in the "),Da=o("code"),Is=t("application.properties"),As=t(" file."),tn=u(),H=o("pre"),en=u(),E=o("p"),Os=t("As you can see, with the "),La=o("code"),Fs=t("@Value"),Ds=t(" annotation above, Spring will inject the value automatically for us. This way we can keep all application configuration in the "),ja=o("code"),Ls=t("application.properties"),js=t(" and access them where ever we wan\u2019t. Isn\u2019t that cool? Note that we could do the same for the "),Ja=o("code"),Js=t("Hello JavaFx"),Xs=t(" text of the "),Xa=o("code"),Bs=t("Label"),Ts=t(". I\u2019ll leave it as an exercise for the reader."),on=u(),F=o("p"),Rs=t("Finally, lets publish the event in the "),Ba=o("code"),Hs=t("start"),Us=t(" method."),pn=u(),U=o("pre"),ln=u(),K=o("p"),Ms=t("We\u2019re ready to run our application. You should see something similar."),cn=u(),aa=o("p"),na=o("img"),rn=u(),D=o("p"),Ws=t("In the next article, we\u2019ll use "),Ta=o("code"),$s=t("FXWeaver"),zs=t("."),un=u(),M=o("p"),Ys=t("Source code for this article can be found "),W=o("a"),Gs=t("here"),this.h()},l(a){d=p(a,"DIV",{class:!0});var c=l(d);g=p(c,"H3",{});var Ns=l(g);A=e(Ns,"All articles in this series"),Ns.forEach(s),j=k(c),r=p(c,"OL",{});var S=l(r);_=p(S,"LI",{});var Qs=l(_);O=p(Qs,"A",{href:!0});var Ks=l(O);fn=e(Ks,"JavaFX with Spring Boot Part-01: Introduction"),Ks.forEach(s),Qs.forEach(s),vn=k(S),ea=p(S,"LI",{});var at=l(ea);z=p(at,"A",{href:!0});var nt=l(z);hn=e(nt,"JavaFX with Spring Boot Part-02: Basic Integration"),nt.forEach(s),at.forEach(s),mn=k(S),oa=p(S,"LI",{});var st=l(oa);wn=e(st,"JavaFX with Spring Boot Part-03: Advanced Integration"),st.forEach(s),En=k(S),pa=p(S,"LI",{});var tt=l(pa);Y=p(tt,"A",{href:!0});var et=l(Y);_n=e(et,"JavaFX with Spring Boot Part-04: Using FXML"),et.forEach(s),tt.forEach(s),gn=k(S),la=p(S,"LI",{});var ot=l(la);G=p(ot,"A",{href:!0});var pt=l(G);yn=e(pt,"JavaFX with Spring Boot Part-05: FxWeaver Integration"),pt.forEach(s),ot.forEach(s),S.forEach(s),c.forEach(s),Ra=k(a),Ha=p(a,"BR",{}),Ua=k(a),V=p(a,"P",{});var lt=l(V);bn=e(lt,"In the previous article, we\u2019ve seen a basic/minimal integration of Spring boot with JavaFX. In this article we\u2019re going to see some extra wiring up to get the most out of Spring Boot."),lt.forEach(s),Ma=k(a),Z=p(a,"H2",{});var ct=l(Z);xn=e(ct,"Creating the Application Context"),ct.forEach(s),Wa=k(a),f=p(a,"P",{});var v=l(f);Cn=e(v,"In the previous article, we had extended JavaFX\u2019s "),ca=p(v,"CODE",{});var it=l(ca);Sn=e(it,"Application"),it.forEach(s),Pn=e(v," abstract class by overriding its "),ia=p(v,"CODE",{});var rt=l(ia);In=e(rt,"start"),rt.forEach(s),An=e(v," method. "),ra=p(v,"CODE",{});var ut=l(ra);On=e(ut,"start"),ut.forEach(s),Fn=e(v," method and its "),ua=p(v,"CODE",{});var kt=l(ua);Dn=e(kt,"close"),kt.forEach(s),Ln=e(v," counter part are called on the UI thread. On the other hand the "),ka=p(v,"CODE",{});var dt=l(ka);jn=e(dt,"init"),dt.forEach(s),Jn=e(v," method is called on a non-ui thread and the "),da=p(v,"CODE",{});var ft=l(da);Xn=e(ft,"start"),ft.forEach(s),Bn=e(v," is only called after the "),fa=p(v,"CODE",{});var vt=l(fa);Tn=e(vt,"init"),vt.forEach(s),Rn=e(v," method returns. This makes the "),va=p(v,"CODE",{});var ht=l(va);Hn=e(ht,"init"),ht.forEach(s),Un=e(v," method the perfect place to create our "),ha=p(v,"CODE",{});var mt=l(ha);Mn=e(mt,"ApplicationContext"),mt.forEach(s),Wn=e(v,"."),v.forEach(s),$a=k(a),J=p(a,"PRE",{class:!0});var se=l(J);se.forEach(s),za=k(a),q=p(a,"H2",{});var wt=l(q);$n=e(wt,"Closing the Application Context"),wt.forEach(s),Ya=k(a),x=p(a,"P",{});var sa=l(x);zn=e(sa,"According to the official docs, "),ma=p(sa,"CODE",{});var Et=l(ma);Yn=e(Et,"stop"),Et.forEach(s),Gn=e(sa," method \u201Cprovides a convenient place to prepare for application exit and destroy resources\u201D. It is the right place to close the application context as well as to terminate the UI thread by calling "),wa=p(sa,"CODE",{});var _t=l(wa);Vn=e(_t,"Platform.exit()"),_t.forEach(s),Zn=e(sa,"."),sa.forEach(s),Ga=k(a),X=p(a,"PRE",{class:!0});var te=l(X);te.forEach(s),Va=k(a),N=p(a,"H2",{});var gt=l(N);qn=e(gt,"Decoupling UI Creation Code from the Application Configuration Code"),gt.forEach(s),Za=k(a),C=p(a,"P",{});var ta=l(C);Nn=e(ta,"In the previous article, we had overridden the "),Ea=p(ta,"CODE",{});var yt=l(Ea);Qn=e(yt,"start"),yt.forEach(s),Kn=e(ta," method as follows. Since we only want application-wide initialization and termination related code in the "),_a=p(ta,"CODE",{});var bt=l(_a);as=e(bt,"JavaFxApp"),bt.forEach(s),ns=e(ta," class, this is not ideal."),ta.forEach(s),qa=k(a),B=p(a,"PRE",{class:!0});var ee=l(B);ee.forEach(s),Na=k(a),y=p(a,"P",{});var L=l(y);ss=e(L,"Spring provides a great way of communication among components by firing events. We will be using this feature for various things in the upcoming articles. For now, let us make use of it to move the UI creation code in its own place. Since "),ga=p(L,"CODE",{});var xt=l(ga);ts=e(xt,"start"),xt.forEach(s),es=e(L," method is called when the "),ya=p(L,"CODE",{});var Ct=l(ya);os=e(Ct,"stage"),Ct.forEach(s),ps=e(L," object is ready (in other words JavaFX application thread aka UI thread is ready), we want to publish an event in the "),ba=p(L,"CODE",{});var St=l(ba);ls=e(St,"start"),St.forEach(s),cs=e(L," method and handle the event in some where else."),L.forEach(s),Qa=k(a),Q=p(a,"P",{});var Pt=l(Q);is=e(Pt,"Let\u2019s first create an event class for our case."),Pt.forEach(s),Ka=k(a),T=p(a,"PRE",{class:!0});var oe=l(T);oe.forEach(s),an=k(a),w=p(a,"P",{});var P=l(w);rs=e(P,"Then create a "),xa=p(P,"CODE",{});var It=l(xa);us=e(It,"Listener"),It.forEach(s),ks=e(P," for this type of event. Since we\u2019ll be creating various events and listeners in the future, it is good the create a new package called "),Ca=p(P,"CODE",{});var At=l(Ca);ds=e(At,"event"),At.forEach(s),fs=e(P," and put all events and their corresponding listeners there. Also, I highly recommend "),Sa=p(P,"CODE",{});var Ot=l(Sa);vs=e(Ot,"XYZEvent"),Ot.forEach(s),hs=e(P," and "),Pa=p(P,"CODE",{});var Ft=l(Pa);ms=e(Ft,"XYZEventListener"),Ft.forEach(s),ws=e(P," pattern for naming event and listener classes."),P.forEach(s),nn=k(a),R=p(a,"PRE",{class:!0});var pe=l(R);pe.forEach(s),sn=k(a),h=p(a,"P",{});var b=l(h);Es=e(b,"With "),Ia=p(b,"CODE",{});var Dt=l(Ia);_s=e(Dt,"@Component"),Dt.forEach(s),gs=e(b," annotation, spring will take care of creating a "),Aa=p(b,"CODE",{});var Lt=l(Aa);ys=e(Lt,"StageReadyEventListener"),Lt.forEach(s),bs=e(b," object for us. The "),Oa=p(b,"CODE",{});var jt=l(Oa);xs=e(jt,"ApplicationContext"),jt.forEach(s),Cs=e(b," we\u2019ve created in the "),Fa=p(b,"CODE",{});var Jt=l(Fa);Ss=e(Jt,"init"),Jt.forEach(s),Ps=e(b," method will be injected into the constructor by Spring as well. Let\u2019s make use of another Spring goodie by defining a title for our application in the "),Da=p(b,"CODE",{});var Xt=l(Da);Is=e(Xt,"application.properties"),Xt.forEach(s),As=e(b," file."),b.forEach(s),tn=k(a),H=p(a,"PRE",{class:!0});var le=l(H);le.forEach(s),en=k(a),E=p(a,"P",{});var I=l(E);Os=e(I,"As you can see, with the "),La=p(I,"CODE",{});var Bt=l(La);Fs=e(Bt,"@Value"),Bt.forEach(s),Ds=e(I," annotation above, Spring will inject the value automatically for us. This way we can keep all application configuration in the "),ja=p(I,"CODE",{});var Tt=l(ja);Ls=e(Tt,"application.properties"),Tt.forEach(s),js=e(I," and access them where ever we wan\u2019t. Isn\u2019t that cool? Note that we could do the same for the "),Ja=p(I,"CODE",{});var Rt=l(Ja);Js=e(Rt,"Hello JavaFx"),Rt.forEach(s),Xs=e(I," text of the "),Xa=p(I,"CODE",{});var Ht=l(Xa);Bs=e(Ht,"Label"),Ht.forEach(s),Ts=e(I,". I\u2019ll leave it as an exercise for the reader."),I.forEach(s),on=k(a),F=p(a,"P",{});var kn=l(F);Rs=e(kn,"Finally, lets publish the event in the "),Ba=p(kn,"CODE",{});var Ut=l(Ba);Hs=e(Ut,"start"),Ut.forEach(s),Us=e(kn," method."),kn.forEach(s),pn=k(a),U=p(a,"PRE",{class:!0});var ce=l(U);ce.forEach(s),ln=k(a),K=p(a,"P",{});var Mt=l(K);Ms=e(Mt,"We\u2019re ready to run our application. You should see something similar."),Mt.forEach(s),cn=k(a),aa=p(a,"P",{});var Wt=l(aa);na=p(Wt,"IMG",{src:!0,alt:!0}),Wt.forEach(s),rn=k(a),D=p(a,"P",{});var dn=l(D);Ws=e(dn,"In the next article, we\u2019ll use "),Ta=p(dn,"CODE",{});var $t=l(Ta);$s=e($t,"FXWeaver"),$t.forEach(s),zs=e(dn,"."),dn.forEach(s),un=k(a),M=p(a,"P",{});var Vs=l(M);Ys=e(Vs,"Source code for this article can be found "),W=p(Vs,"A",{href:!0,rel:!0});var zt=l(W);Gs=e(zt,"here"),zt.forEach(s),Vs.forEach(s),this.h()},h(){m(O,"href","/blog/javafx-spring-boot-01"),m(z,"href","/blog/javafx-spring-boot-02"),m(Y,"href","/blog/javafx-spring-boot-04"),m(G,"href","/blog/javafx-spring-boot-05"),m(d,"class","table-of-contents"),m(J,"class","language-java"),m(X,"class","language-java"),m(B,"class","language-java"),m(T,"class","language-java"),m(R,"class","language-java"),m(H,"class","language-properties"),m(U,"class","language-java"),Ee(na.src,qs="/images/blog/javafx-spring-boot-starter-03-01.png")||m(na,"src",qs),m(na,"alt","spring initialz configuration"),m(W,"href","https://github.com/harunzafer/javafx-spring-boot-starter/releases/tag/v0.3"),m(W,"rel","nofollow")},m(a,c){i(a,d,c),n(d,g),n(g,A),n(d,j),n(d,r),n(r,_),n(_,O),n(O,fn),n(r,vn),n(r,ea),n(ea,z),n(z,hn),n(r,mn),n(r,oa),n(oa,wn),n(r,En),n(r,pa),n(pa,Y),n(Y,_n),n(r,gn),n(r,la),n(la,G),n(G,yn),i(a,Ra,c),i(a,Ha,c),i(a,Ua,c),i(a,V,c),n(V,bn),i(a,Ma,c),i(a,Z,c),n(Z,xn),i(a,Wa,c),i(a,f,c),n(f,Cn),n(f,ca),n(ca,Sn),n(f,Pn),n(f,ia),n(ia,In),n(f,An),n(f,ra),n(ra,On),n(f,Fn),n(f,ua),n(ua,Dn),n(f,Ln),n(f,ka),n(ka,jn),n(f,Jn),n(f,da),n(da,Xn),n(f,Bn),n(f,fa),n(fa,Tn),n(f,Rn),n(f,va),n(va,Hn),n(f,Un),n(f,ha),n(ha,Mn),n(f,Wn),i(a,$a,c),i(a,J,c),J.innerHTML=Zt,i(a,za,c),i(a,q,c),n(q,$n),i(a,Ya,c),i(a,x,c),n(x,zn),n(x,ma),n(ma,Yn),n(x,Gn),n(x,wa),n(wa,Vn),n(x,Zn),i(a,Ga,c),i(a,X,c),X.innerHTML=qt,i(a,Va,c),i(a,N,c),n(N,qn),i(a,Za,c),i(a,C,c),n(C,Nn),n(C,Ea),n(Ea,Qn),n(C,Kn),n(C,_a),n(_a,as),n(C,ns),i(a,qa,c),i(a,B,c),B.innerHTML=Nt,i(a,Na,c),i(a,y,c),n(y,ss),n(y,ga),n(ga,ts),n(y,es),n(y,ya),n(ya,os),n(y,ps),n(y,ba),n(ba,ls),n(y,cs),i(a,Qa,c),i(a,Q,c),n(Q,is),i(a,Ka,c),i(a,T,c),T.innerHTML=Qt,i(a,an,c),i(a,w,c),n(w,rs),n(w,xa),n(xa,us),n(w,ks),n(w,Ca),n(Ca,ds),n(w,fs),n(w,Sa),n(Sa,vs),n(w,hs),n(w,Pa),n(Pa,ms),n(w,ws),i(a,nn,c),i(a,R,c),R.innerHTML=Kt,i(a,sn,c),i(a,h,c),n(h,Es),n(h,Ia),n(Ia,_s),n(h,gs),n(h,Aa),n(Aa,ys),n(h,bs),n(h,Oa),n(Oa,xs),n(h,Cs),n(h,Fa),n(Fa,Ss),n(h,Ps),n(h,Da),n(Da,Is),n(h,As),i(a,tn,c),i(a,H,c),H.innerHTML=ae,i(a,en,c),i(a,E,c),n(E,Os),n(E,La),n(La,Fs),n(E,Ds),n(E,ja),n(ja,Ls),n(E,js),n(E,Ja),n(Ja,Js),n(E,Xs),n(E,Xa),n(Xa,Bs),n(E,Ts),i(a,on,c),i(a,F,c),n(F,Rs),n(F,Ba),n(Ba,Hs),n(F,Us),i(a,pn,c),i(a,U,c),U.innerHTML=ne,i(a,ln,c),i(a,K,c),n(K,Ms),i(a,cn,c),i(a,aa,c),n(aa,na),i(a,rn,c),i(a,D,c),n(D,Ws),n(D,Ta),n(Ta,$s),n(D,zs),i(a,un,c),i(a,M,c),n(M,Ys),n(M,W),n(W,Gs)},p:_e,d(a){a&&s(d),a&&s(Ra),a&&s(Ha),a&&s(Ua),a&&s(V),a&&s(Ma),a&&s(Z),a&&s(Wa),a&&s(f),a&&s($a),a&&s(J),a&&s(za),a&&s(q),a&&s(Ya),a&&s(x),a&&s(Ga),a&&s(X),a&&s(Va),a&&s(N),a&&s(Za),a&&s(C),a&&s(qa),a&&s(B),a&&s(Na),a&&s(y),a&&s(Qa),a&&s(Q),a&&s(Ka),a&&s(T),a&&s(an),a&&s(w),a&&s(nn),a&&s(R),a&&s(sn),a&&s(h),a&&s(tn),a&&s(H),a&&s(en),a&&s(E),a&&s(on),a&&s(F),a&&s(pn),a&&s(U),a&&s(ln),a&&s(K),a&&s(cn),a&&s(aa),a&&s(rn),a&&s(D),a&&s(un),a&&s(M)}}}function be($){let d,g;const A=[$[0],Vt];let j={$$slots:{default:[ye]},$$scope:{ctx:$}};for(let r=0;r<A.length;r+=1)j=Zs(j,A[r]);return d=new ge({props:j}),{c(){ke(d.$$.fragment)},l(r){de(d.$$.fragment,r)},m(r,_){fe(d,r,_),g=!0},p(r,[_]){const O=_&1?ve(A,[_&1&&Yt(r[0]),_&0&&Yt(Vt)]):{};_&2&&(O.$$scope={dirty:_,ctx:r}),d.$set(O)},i(r){g||(he(d.$$.fragment,r),g=!0)},o(r){me(d.$$.fragment,r),g=!1},d(r){we(d,r)}}}const Vt={title:"JavaFX with Spring Boot Part-03: Advanced Integration",date:"2022-04-18",categories:["javafx","spring"]};function xe($,d,g){return $.$$set=A=>{g(0,d=Zs(Zs({},d),Gt(A)))},d=Gt(d),[d]}class Ie extends ie{constructor(d){super(),re(this,d,xe,be,ue,{})}}export{Ie as default,Vt as metadata};
